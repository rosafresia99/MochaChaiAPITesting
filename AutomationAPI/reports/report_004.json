{
  "stats": {
    "suites": 3,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-21T11:19:21.858Z",
    "end": "2024-07-21T11:19:28.572Z",
    "duration": 6714,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b6044a02-a4e6-40d1-a9e5-bb7fecd28ce0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d60224ad-77ec-43e1-b845-3603a78a1d4b",
          "title": "Authorization",
          "fullFile": "/Users/rossaafresiasiagian/Documents/AutomationTest/Sanbercode/AutomationAPI/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new user",
              "fullTitle": "Authorization should register a new user",
              "timedOut": false,
              "duration": 927,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .post('/registration')\n    .send({\n        name: config.credentials.name,\n        email: config.credentials.email,\n        password: config.credentials.password\n    })\n    .expect(201);\n//console.log('Registration response:', response.body); // Debug log\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data).to.have.property('name', config.credentials.name);",
              "err": {},
              "uuid": "9c00de40-1496-4969-bf69-caa8eaeaa83f",
              "parentUUID": "d60224ad-77ec-43e1-b845-3603a78a1d4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login and get tokens",
              "fullTitle": "Authorization should login and get tokens",
              "timedOut": false,
              "duration": 701,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .post('/authentications')\n    .send({\n        email: config.credentials.email,\n        password: config.credentials.password\n    });\n//console.log('Login response:', response.body); // Debug log\nexpect(response.status).to.equal(201);\nexpect(response.body.status).to.equal('success');\naccessToken = response.body.data.accessToken;\nrefreshToken = response.body.data.refreshToken;\nexpect(accessToken).to.be.a('string');\nexpect(refreshToken).to.be.a('string');",
              "err": {},
              "uuid": "a5cd9f63-b452-4b44-bfda-10a9678f0d9d",
              "parentUUID": "d60224ad-77ec-43e1-b845-3603a78a1d4b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c00de40-1496-4969-bf69-caa8eaeaa83f",
            "a5cd9f63-b452-4b44-bfda-10a9678f0d9d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1628,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "95064ac1-a1de-4cfd-9f62-13e3c7a9fba3",
          "title": "User CRUD Operations",
          "fullFile": "/Users/rossaafresiasiagian/Documents/AutomationTest/Sanbercode/AutomationAPI/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User CRUD Operations\"",
              "fullTitle": "User CRUD Operations \"before all\" hook in \"User CRUD Operations\"",
              "timedOut": false,
              "duration": 2003,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Tunggu hingga token tersedia\nawait new Promise((resolve) => setTimeout(resolve, 2000));",
              "err": {},
              "uuid": "72d2c95f-30b3-4760-919e-dd424c5174b7",
              "parentUUID": "95064ac1-a1de-4cfd-9f62-13e3c7a9fba3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "User CRUD Operations should create a new user",
              "timedOut": false,
              "duration": 541,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .post('/users')\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        name: 'kasir-serbaguna',\n        email: 'kasir@example.com',\n        password: 'kasir123@'\n    })\n    .expect(201);\nexpect(response.body.status).to.equal('success');\nuserId = response.body.data.userId;\nexpect(userId).to.be.a('string');",
              "err": {},
              "uuid": "e33840c9-eadb-4d9f-9905-e76736039fdd",
              "parentUUID": "95064ac1-a1de-4cfd-9f62-13e3c7a9fba3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user detail",
              "fullTitle": "User CRUD Operations should get user detail",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .get(`/users/${userId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data.user).to.have.property('id', userId);",
              "err": {},
              "uuid": "1d78dfab-5476-46bb-af22-59ac2c325038",
              "parentUUID": "95064ac1-a1de-4cfd-9f62-13e3c7a9fba3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user",
              "fullTitle": "User CRUD Operations should update user",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .put(`/users/${userId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({ name: 'updated-user', email: 'updated@example.com' })\n    .expect(200);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data).to.have.property('name', 'updated-user');",
              "err": {},
              "uuid": "a518a731-f43d-4673-9adc-9aa0fcb4c659",
              "parentUUID": "95064ac1-a1de-4cfd-9f62-13e3c7a9fba3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete user",
              "fullTitle": "User CRUD Operations should delete user",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .delete(`/users/${userId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\nexpect(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "2e9768f7-17d8-4fee-9bc4-a67268141938",
              "parentUUID": "95064ac1-a1de-4cfd-9f62-13e3c7a9fba3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e33840c9-eadb-4d9f-9905-e76736039fdd",
            "1d78dfab-5476-46bb-af22-59ac2c325038",
            "a518a731-f43d-4673-9adc-9aa0fcb4c659",
            "2e9768f7-17d8-4fee-9bc4-a67268141938"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 760,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2ae4fdd6-1393-491f-9204-9811c5b5750d",
          "title": "Customer CRUD Operations",
          "fullFile": "/Users/rossaafresiasiagian/Documents/AutomationTest/Sanbercode/AutomationAPI/test/customer.test.js",
          "file": "/test/customer.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Customer CRUD Operations\"",
              "fullTitle": "Customer CRUD Operations \"before all\" hook in \"Customer CRUD Operations\"",
              "timedOut": false,
              "duration": 2001,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Tunggu hingga token tersedia\nawait new Promise((resolve) => setTimeout(resolve, 2000));",
              "err": {},
              "uuid": "a0328c2c-7247-47f3-ad8d-4c789ca39d93",
              "parentUUID": "2ae4fdd6-1393-491f-9204-9811c5b5750d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new customer",
              "fullTitle": "Customer CRUD Operations should create a new customer",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .post('/customers')\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        name: 'Budi',\n        phone: '081234567890',\n        address: 'Bandung',\n        description: 'Budi anak Pak Edi'\n    })\n    .expect(201);\nexpect(response.body.status).to.equal('success');\ncustomerId = response.body.data.customerId;\nexpect(customerId).to.be.a('string');",
              "err": {},
              "uuid": "f16ef300-3f92-4914-a92d-2ee3eed42a53",
              "parentUUID": "2ae4fdd6-1393-491f-9204-9811c5b5750d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get customer detail",
              "fullTitle": "Customer CRUD Operations should get customer detail",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .get(`/customers/${customerId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data.customer).to.have.property('name', 'Budi');",
              "err": {},
              "uuid": "285850d6-b05d-4e49-96dc-a1550b05f187",
              "parentUUID": "2ae4fdd6-1393-491f-9204-9811c5b5750d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer",
              "fullTitle": "Customer CRUD Operations should update customer",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .put(`/customers/${customerId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({ name: 'Budi Doremi', phone: '08987654321', address: 'Bandung', description: 'Pelanggan VIP' })\n    .expect(200);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data).to.have.property('name', 'Budi Doremi');",
              "err": {},
              "uuid": "73bfb496-a3ec-463f-8689-da729081b665",
              "parentUUID": "2ae4fdd6-1393-491f-9204-9811c5b5750d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer",
              "fullTitle": "Customer CRUD Operations should delete customer",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .delete(`/customers/${customerId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\nexpect(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "3d663d8c-dacd-4bd6-946a-d8a6c274eea5",
              "parentUUID": "2ae4fdd6-1393-491f-9204-9811c5b5750d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f16ef300-3f92-4914-a92d-2ee3eed42a53",
            "285850d6-b05d-4e49-96dc-a1550b05f187",
            "73bfb496-a3ec-463f-8689-da729081b665",
            "3d663d8c-dacd-4bd6-946a-d8a6c274eea5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 308,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "report",
        "overwrite": "false"
      },
      "version": "6.2.0"
    }
  }
}