{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-21T11:18:05.304Z",
    "end": "2024-07-21T11:18:09.670Z",
    "duration": 4366,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e7cf27be-1de3-49f5-845d-97d11fc3d53e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a5f8c831-95f0-4c88-94db-cb0bc66e796b",
          "title": "Authorization",
          "fullFile": "/Users/rossaafresiasiagian/Documents/AutomationTest/Sanbercode/AutomationAPI/test/customer.test.js",
          "file": "/test/customer.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new user",
              "fullTitle": "Authorization should register a new user",
              "timedOut": false,
              "duration": 999,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .post('/registration')\n    .send({\n        name: config.credentials.name,\n        email: config.credentials.email,\n        password: config.credentials.password\n    })\n    .expect(201);\n//console.log('Registration response:', response.body); // Debug log\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data).to.have.property('name', config.credentials.name);",
              "err": {},
              "uuid": "a753ed0f-dd3f-43b8-828c-203f38a48837",
              "parentUUID": "a5f8c831-95f0-4c88-94db-cb0bc66e796b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login and get tokens",
              "fullTitle": "Authorization should login and get tokens",
              "timedOut": false,
              "duration": 1021,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .post('/authentications')\n    .send({\n        email: config.credentials.email,\n        password: config.credentials.password\n    });\n//console.log('Login response:', response.body); // Debug log\nexpect(response.status).to.equal(201);\nexpect(response.body.status).to.equal('success');\naccessToken = response.body.data.accessToken;\nrefreshToken = response.body.data.refreshToken;\nexpect(accessToken).to.be.a('string');\nexpect(refreshToken).to.be.a('string');",
              "err": {},
              "uuid": "c9406f58-ffc0-47b8-833b-3cf9e6208242",
              "parentUUID": "a5f8c831-95f0-4c88-94db-cb0bc66e796b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a753ed0f-dd3f-43b8-828c-203f38a48837",
            "c9406f58-ffc0-47b8-833b-3cf9e6208242"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2020,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2862b5cd-41af-4390-b4fd-2d7db7465b2a",
          "title": "Customer CRUD Operations",
          "fullFile": "/Users/rossaafresiasiagian/Documents/AutomationTest/Sanbercode/AutomationAPI/test/customer.test.js",
          "file": "/test/customer.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Customer CRUD Operations\"",
              "fullTitle": "Customer CRUD Operations \"before all\" hook in \"Customer CRUD Operations\"",
              "timedOut": false,
              "duration": 2002,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Tunggu hingga token tersedia\nawait new Promise((resolve) => setTimeout(resolve, 2000));",
              "err": {},
              "uuid": "59a06212-c916-4315-9909-9496a59c8fd2",
              "parentUUID": "2862b5cd-41af-4390-b4fd-2d7db7465b2a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new customer",
              "fullTitle": "Customer CRUD Operations should create a new customer",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .post('/customers')\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        name: 'Budi',\n        phone: '081234567890',\n        address: 'Bandung',\n        description: 'Budi anak Pak Edi'\n    })\n    .expect(201);\nexpect(response.body.status).to.equal('success');\ncustomerId = response.body.data.customerId;\nexpect(customerId).to.be.a('string');",
              "err": {},
              "uuid": "2efacdd9-bba1-46b5-9ee9-109a8c9a1f06",
              "parentUUID": "2862b5cd-41af-4390-b4fd-2d7db7465b2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get customer detail",
              "fullTitle": "Customer CRUD Operations should get customer detail",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .get(`/customers/${customerId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data.customer).to.have.property('name', 'Budi');",
              "err": {},
              "uuid": "072443c6-4f2c-445d-b4cb-4b8aef31cdbb",
              "parentUUID": "2862b5cd-41af-4390-b4fd-2d7db7465b2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer",
              "fullTitle": "Customer CRUD Operations should update customer",
              "timedOut": false,
              "duration": 76,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .put(`/customers/${customerId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({ name: 'Budi Doremi', phone: '08987654321', address: 'Bandung', description: 'Pelanggan VIP' })\n    .expect(200);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data).to.have.property('name', 'Budi Doremi');",
              "err": {},
              "uuid": "63dfbd80-8b2f-439b-b1a5-756f2363e493",
              "parentUUID": "2862b5cd-41af-4390-b4fd-2d7db7465b2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer",
              "fullTitle": "Customer CRUD Operations should delete customer",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .delete(`/customers/${customerId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\nexpect(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "7ddadb2b-3b0f-422d-8145-af0e20382e1c",
              "parentUUID": "2862b5cd-41af-4390-b4fd-2d7db7465b2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2efacdd9-bba1-46b5-9ee9-109a8c9a1f06",
            "072443c6-4f2c-445d-b4cb-4b8aef31cdbb",
            "63dfbd80-8b2f-439b-b1a5-756f2363e493",
            "7ddadb2b-3b0f-422d-8145-af0e20382e1c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 332,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "report",
        "overwrite": "false"
      },
      "version": "6.2.0"
    }
  }
}