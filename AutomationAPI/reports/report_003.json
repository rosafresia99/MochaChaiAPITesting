{
  "stats": {
    "suites": 3,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-21T11:18:28.623Z",
    "end": "2024-07-21T11:18:34.665Z",
    "duration": 6042,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d4380adc-61b2-496c-ac93-2ef6ccd68bd7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dd4df8e4-2359-4ad9-8976-3767d79cddfa",
          "title": "Authorization",
          "fullFile": "/Users/rossaafresiasiagian/Documents/AutomationTest/Sanbercode/AutomationAPI/test/auth.test.js",
          "file": "/test/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new user",
              "fullTitle": "Authorization should register a new user",
              "timedOut": false,
              "duration": 788,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .post('/registration')\n    .send({\n        name: config.credentials.name,\n        email: config.credentials.email,\n        password: config.credentials.password\n    })\n    .expect(201);\n//console.log('Registration response:', response.body); // Debug log\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data).to.have.property('name', config.credentials.name);",
              "err": {},
              "uuid": "a7cc3590-6b60-4123-b316-e94994b22599",
              "parentUUID": "dd4df8e4-2359-4ad9-8976-3767d79cddfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login and get tokens",
              "fullTitle": "Authorization should login and get tokens",
              "timedOut": false,
              "duration": 727,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .post('/authentications')\n    .send({\n        email: config.credentials.email,\n        password: config.credentials.password\n    });\n//console.log('Login response:', response.body); // Debug log\nexpect(response.status).to.equal(201);\nexpect(response.body.status).to.equal('success');\naccessToken = response.body.data.accessToken;\nrefreshToken = response.body.data.refreshToken;\nexpect(accessToken).to.be.a('string');\nexpect(refreshToken).to.be.a('string');",
              "err": {},
              "uuid": "f4bbd7d6-2cb1-4b01-8965-a9fbde222a71",
              "parentUUID": "dd4df8e4-2359-4ad9-8976-3767d79cddfa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7cc3590-6b60-4123-b316-e94994b22599",
            "f4bbd7d6-2cb1-4b01-8965-a9fbde222a71"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1515,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "6a901990-85cd-4140-bf8d-de41c54a74cf",
          "title": "Category CRUD Operations",
          "fullFile": "/Users/rossaafresiasiagian/Documents/AutomationTest/Sanbercode/AutomationAPI/test/category.test.js",
          "file": "/test/category.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Category CRUD Operations\"",
              "fullTitle": "Category CRUD Operations \"before all\" hook in \"Category CRUD Operations\"",
              "timedOut": false,
              "duration": 2003,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Tambahkan timeout 10 detik untuk hook ini\n// Tunggu hingga token tersedia\nawait new Promise((resolve) => setTimeout(resolve, 2000));",
              "err": {},
              "uuid": "33edd885-7650-43b0-a8ac-85226fb71fa7",
              "parentUUID": "6a901990-85cd-4140-bf8d-de41c54a74cf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new category",
              "fullTitle": "Category CRUD Operations should create a new category",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Tambahkan timeout 10 detik untuk tes ini\nconst response = await supertest(config.baseUrl)\n    .post('/categories')\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        name: 'makanan ringan',\n        description: 'makanan ringan dari indofood'\n    })\n    .expect(201);\nexpect(response.body.status).to.equal('success');\ncategoryId = response.body.data.categoryId;\nsetCategoryId(categoryId);\nexpect(categoryId).to.be.a('string');",
              "err": {},
              "uuid": "1cbb5ca4-328f-4288-b713-4a36b821e581",
              "parentUUID": "6a901990-85cd-4140-bf8d-de41c54a74cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get category detail",
              "fullTitle": "Category CRUD Operations should get category detail",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Tambahkan timeout 10 detik untuk tes ini\nconst response = await supertest(config.baseUrl)\n    .get(`/categories/${categoryId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\n// Tambahkan log untuk melihat respons yang diterima\n//console.log(response.body);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data.category).to.have.property('name', 'makanan ringan');",
              "err": {},
              "uuid": "a5537e9f-04aa-422e-9e01-4a490e8a47b2",
              "parentUUID": "6a901990-85cd-4140-bf8d-de41c54a74cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update category",
              "fullTitle": "Category CRUD Operations should update category",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Tambahkan timeout 10 detik untuk tes ini\nconst response = await supertest(config.baseUrl)\n    .put(`/categories/${categoryId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({ name: 'minuman ringan', description: 'minuman ringan dari indofood' })\n    .expect(200);\nconsole.log(response.body);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data).to.have.property('name', 'minuman ringan');",
              "err": {},
              "uuid": "2d1cd992-3797-4ab0-8f79-bc4c554c564a",
              "parentUUID": "6a901990-85cd-4140-bf8d-de41c54a74cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1cbb5ca4-328f-4288-b713-4a36b821e581",
            "a5537e9f-04aa-422e-9e01-4a490e8a47b2",
            "2d1cd992-3797-4ab0-8f79-bc4c554c564a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 252,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3b5b174f-da57-40a6-8b7f-279a4c0731b0",
          "title": "Product CRUD Operations",
          "fullFile": "/Users/rossaafresiasiagian/Documents/AutomationTest/Sanbercode/AutomationAPI/test/product.test.js",
          "file": "/test/product.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Product CRUD Operations\"",
              "fullTitle": "Product CRUD Operations \"before all\" hook in \"Product CRUD Operations\"",
              "timedOut": false,
              "duration": 2002,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Tambahkan timeout 10 detik untuk hook ini\n// Tunggu hingga token dan categoryId tersedia\nawait new Promise((resolve) => setTimeout(resolve, 2000));\nconsole.log('Category ID:', categoryId); // Verifikasi categoryId",
              "err": {},
              "uuid": "5db7b417-35b0-41b1-ab62-c2428d4724de",
              "parentUUID": "3b5b174f-da57-40a6-8b7f-279a4c0731b0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new product",
              "fullTitle": "Product CRUD Operations should create a new product",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .post('/products')\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        category_id: categoryId,\n        code: 'A314ASDDFIER3432',\n        name: 'taro',\n        price: '3500',\n        cost: '3000',\n        stock: '5'\n    })\n    .expect(201);\nexpect(response.body.status).to.equal('success');\nproductId = response.body.data.productId;\nsetProductId(productId);\nexpect(productId).to.be.a('string');",
              "err": {},
              "uuid": "befe91b4-cb99-46b0-b4d5-2fcf2b7c0b03",
              "parentUUID": "3b5b174f-da57-40a6-8b7f-279a4c0731b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get product detail",
              "fullTitle": "Product CRUD Operations should get product detail",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .get(`/products/${productId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data.product).to.have.property('code', 'A314ASDDFIER3432');",
              "err": {},
              "uuid": "2734bef2-0f8b-4cb9-a2ee-3d0791126eef",
              "parentUUID": "3b5b174f-da57-40a6-8b7f-279a4c0731b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update product",
              "fullTitle": "Product CRUD Operations should update product",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .put(`/products/${productId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        category_id: categoryId,\n        code: 'A314ASDDFIER3432',\n        name: 'taro updated',\n        price: '4500',\n        cost: '4000',\n        stock: '10'\n    })\n    .expect(200);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data).to.have.property('name', 'taro updated');",
              "err": {},
              "uuid": "714101b5-442e-4272-92b4-420e874ac165",
              "parentUUID": "3b5b174f-da57-40a6-8b7f-279a4c0731b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "befe91b4-cb99-46b0-b4d5-2fcf2b7c0b03",
            "2734bef2-0f8b-4cb9-a2ee-3d0791126eef",
            "714101b5-442e-4272-92b4-420e874ac165"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 259,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "report",
        "overwrite": "false"
      },
      "version": "6.2.0"
    }
  }
}