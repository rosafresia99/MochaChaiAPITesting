{
  "stats": {
    "suites": 3,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-21T11:16:52.985Z",
    "end": "2024-07-21T11:16:59.147Z",
    "duration": 6162,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b150dd0e-8110-4e5a-baa1-9d6703ed35f1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0d6dca05-53f2-4969-8d2a-bbc5be186afc",
          "title": "Authorization",
          "fullFile": "/Users/rossaafresiasiagian/Documents/AutomationTest/Sanbercode/AutomationAPI/test/auth.test.js",
          "file": "/test/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new user",
              "fullTitle": "Authorization should register a new user",
              "timedOut": false,
              "duration": 965,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .post('/registration')\n    .send({\n        name: config.credentials.name,\n        email: config.credentials.email,\n        password: config.credentials.password\n    })\n    .expect(201);\n//console.log('Registration response:', response.body); // Debug log\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data).to.have.property('name', config.credentials.name);",
              "err": {},
              "uuid": "3bbda0c7-0e9b-46a9-a82b-31d8d2889cc7",
              "parentUUID": "0d6dca05-53f2-4969-8d2a-bbc5be186afc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login and get tokens",
              "fullTitle": "Authorization should login and get tokens",
              "timedOut": false,
              "duration": 665,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest.default(config.baseUrl)\n    .post('/authentications')\n    .send({\n        email: config.credentials.email,\n        password: config.credentials.password\n    });\n//console.log('Login response:', response.body); // Debug log\nexpect(response.status).to.equal(201);\nexpect(response.body.status).to.equal('success');\naccessToken = response.body.data.accessToken;\nrefreshToken = response.body.data.refreshToken;\nexpect(accessToken).to.be.a('string');\nexpect(refreshToken).to.be.a('string');",
              "err": {},
              "uuid": "282f8305-e8c5-4947-aa8c-249491559d72",
              "parentUUID": "0d6dca05-53f2-4969-8d2a-bbc5be186afc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3bbda0c7-0e9b-46a9-a82b-31d8d2889cc7",
            "282f8305-e8c5-4947-aa8c-249491559d72"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1630,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "58496b50-dbad-41ec-ba31-7d4ee4d3d575",
          "title": "Category CRUD Operations",
          "fullFile": "/Users/rossaafresiasiagian/Documents/AutomationTest/Sanbercode/AutomationAPI/test/category.test.js",
          "file": "/test/category.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Category CRUD Operations\"",
              "fullTitle": "Category CRUD Operations \"before all\" hook in \"Category CRUD Operations\"",
              "timedOut": false,
              "duration": 2001,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Tambahkan timeout 10 detik untuk hook ini\n// Tunggu hingga token tersedia\nawait new Promise((resolve) => setTimeout(resolve, 2000));",
              "err": {},
              "uuid": "f20bc1db-5c04-4a9d-b676-58a0bef64290",
              "parentUUID": "58496b50-dbad-41ec-ba31-7d4ee4d3d575",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new category",
              "fullTitle": "Category CRUD Operations should create a new category",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Tambahkan timeout 10 detik untuk tes ini\nconst response = await supertest(config.baseUrl)\n    .post('/categories')\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        name: 'makanan ringan',\n        description: 'makanan ringan dari indofood'\n    })\n    .expect(201);\nexpect(response.body.status).to.equal('success');\ncategoryId = response.body.data.categoryId;\nsetCategoryId(categoryId);\nexpect(categoryId).to.be.a('string');",
              "err": {},
              "uuid": "21b158a8-8a38-4ce9-88f0-eecdf78858ea",
              "parentUUID": "58496b50-dbad-41ec-ba31-7d4ee4d3d575",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get category detail",
              "fullTitle": "Category CRUD Operations should get category detail",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Tambahkan timeout 10 detik untuk tes ini\nconst response = await supertest(config.baseUrl)\n    .get(`/categories/${categoryId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\n// Tambahkan log untuk melihat respons yang diterima\n//console.log(response.body);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data.category).to.have.property('name', 'makanan ringan');",
              "err": {},
              "uuid": "87d9936f-f2db-4afb-8940-764af0260a25",
              "parentUUID": "58496b50-dbad-41ec-ba31-7d4ee4d3d575",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update category",
              "fullTitle": "Category CRUD Operations should update category",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Tambahkan timeout 10 detik untuk tes ini\nconst response = await supertest(config.baseUrl)\n    .put(`/categories/${categoryId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({ name: 'minuman ringan', description: 'minuman ringan dari indofood' })\n    .expect(200);\nconsole.log(response.body);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data).to.have.property('name', 'minuman ringan');",
              "err": {},
              "uuid": "a2bddcc8-20f8-492f-abb5-6d675d868b9f",
              "parentUUID": "58496b50-dbad-41ec-ba31-7d4ee4d3d575",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "21b158a8-8a38-4ce9-88f0-eecdf78858ea",
            "87d9936f-f2db-4afb-8940-764af0260a25",
            "a2bddcc8-20f8-492f-abb5-6d675d868b9f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 235,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4c404ad3-c5fa-4af8-a5db-141cf428f942",
          "title": "Product CRUD Operations",
          "fullFile": "/Users/rossaafresiasiagian/Documents/AutomationTest/Sanbercode/AutomationAPI/test/product.test.js",
          "file": "/test/product.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Product CRUD Operations\"",
              "fullTitle": "Product CRUD Operations \"before all\" hook in \"Product CRUD Operations\"",
              "timedOut": false,
              "duration": 2002,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Tambahkan timeout 10 detik untuk hook ini\n// Tunggu hingga token dan categoryId tersedia\nawait new Promise((resolve) => setTimeout(resolve, 2000));\nconsole.log('Category ID:', categoryId); // Verifikasi categoryId",
              "err": {},
              "uuid": "c39997b2-385d-4f72-81e0-6acfc2603173",
              "parentUUID": "4c404ad3-c5fa-4af8-a5db-141cf428f942",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new product",
              "fullTitle": "Product CRUD Operations should create a new product",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .post('/products')\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        category_id: categoryId,\n        code: 'A314ASDDFIER3432',\n        name: 'taro',\n        price: '3500',\n        cost: '3000',\n        stock: '5'\n    })\n    .expect(201);\nexpect(response.body.status).to.equal('success');\nproductId = response.body.data.productId;\nsetProductId(productId);\nexpect(productId).to.be.a('string');",
              "err": {},
              "uuid": "2b5169d3-5091-4f02-b22d-a1a26bee54a7",
              "parentUUID": "4c404ad3-c5fa-4af8-a5db-141cf428f942",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get product detail",
              "fullTitle": "Product CRUD Operations should get product detail",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .get(`/products/${productId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data.product).to.have.property('code', 'A314ASDDFIER3432');",
              "err": {},
              "uuid": "6fec85df-2ebe-45a1-8d8d-72bb4047a00e",
              "parentUUID": "4c404ad3-c5fa-4af8-a5db-141cf428f942",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update product",
              "fullTitle": "Product CRUD Operations should update product",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(config.baseUrl)\n    .put(`/products/${productId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        category_id: categoryId,\n        code: 'A314ASDDFIER3432',\n        name: 'taro updated',\n        price: '4500',\n        cost: '4000',\n        stock: '10'\n    })\n    .expect(200);\nexpect(response.body.status).to.equal('success');\nexpect(response.body.data).to.have.property('name', 'taro updated');",
              "err": {},
              "uuid": "7ca1b103-4d84-4593-a553-dd6a7309e1cf",
              "parentUUID": "4c404ad3-c5fa-4af8-a5db-141cf428f942",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b5169d3-5091-4f02-b22d-a1a26bee54a7",
            "6fec85df-2ebe-45a1-8d8d-72bb4047a00e",
            "7ca1b103-4d84-4593-a553-dd6a7309e1cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 275,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "report",
        "overwrite": "false"
      },
      "version": "6.2.0"
    }
  }
}